{
  "version": 3,
  "sources": ["../../../src/system/logger.js"],
  "sourcesContent": ["/**\r\n * logger.error('error message');\r\n * logger.warn('warn message');\r\n * logger.info('info message');\r\n * logger.debug('debug message');\r\n * \r\n * @param {string} message - required\r\n * @param {context} string - optional default to \"\"\r\n * @param {data} any - optional default to null\r\n * \r\n * Date is set to current date and time\r\n */\r\n\r\nconst LOG_LEVELS = {\r\n    ERROR: 'error',\r\n    WARN: 'warn',\r\n    INFO: 'info',\r\n    DEBUG: 'debug'\r\n}\r\n\r\nconst LOG_STRUCT = {\r\n    message: \"\",\r\n    context: \"\",\r\n    data: null,\r\n    date: null\r\n}\r\n\r\n/**\r\n * @class Logger\r\n * @description Logger class to log messages\r\n * Messages are stored in a log array\r\n */\r\nclass Logger extends EventTarget {\r\n    #items = [];\r\n\r\n    /**\r\n     * Internal method to handle log creation.\r\n     * @param {string} level - Log level (ERROR, WARN, INFO, DEBUG)\r\n     * @param {string} message - Main log message\r\n     * @param {string} context - Additional context info\r\n     * @param {any} data - Optional data payload\r\n     */\r\n    #log(level, message = \"\", context = \"\", data = null) {\r\n        const entry = structuredClone(LOG_STRUCT);\r\n        entry.message = message;\r\n        entry.context = context;\r\n        entry.data = data;\r\n        entry.date = new Date().toISOString();\r\n        entry.level = level;\r\n        this.#items.push(entry);\r\n    }\r\n\r\n    /**\r\n     * Returns all log entries.\r\n     * @returns {Array}\r\n     */\r\n    get logs() {\r\n        return this.#items;\r\n    }\r\n\r\n    /**\r\n     * Returns all error log entries.\r\n     * @returns {Array}\r\n     */\r\n    get errors() {\r\n        return this.#items.filter(item => item.level === LOG_LEVELS.ERROR);\r\n    }\r\n\r\n    /**\r\n     * Logs an error message.\r\n     * @param {string} message\r\n     * @param {string} context\r\n     * @param {any} data\r\n     */\r\n    error(message, context, data) {\r\n        this.#log(LOG_LEVELS.ERROR, message, context, data);\r\n        this.dispatchEvent(new CustomEvent('error', { detail: { message, context, data } }));   \r\n    }\r\n\r\n    /**\r\n     * Logs a warning message.\r\n     * @param {string} message\r\n     * @param {string} context\r\n     * @param {any} data\r\n     */\r\n    warn(message, context, data) {\r\n        this.#log(LOG_LEVELS.WARN, message, context, data);\r\n    }\r\n\r\n    /**\r\n     * Logs an informational message.\r\n     * @param {string} message\r\n     * @param {string} context\r\n     * @param {any} data\r\n     */\r\n    info(message, context, data) {\r\n        this.#log(LOG_LEVELS.INFO, message, context, data);\r\n    }\r\n\r\n    /**\r\n     * Logs a debug message.\r\n     * @param {string} message\r\n     * @param {string} context\r\n     * @param {any} data\r\n     */\r\n    debug(message, context, data) {\r\n        this.#log(LOG_LEVELS.DEBUG, message, context, data);\r\n    }\r\n\r\n    /**\r\n     * Clears all log entries\r\n     * @returns {void}\r\n     */\r\n    clear() {\r\n        this.#items = [];\r\n    }\r\n\r\n    /**\r\n     * Clears all error log entries\r\n     * @returns {void}\r\n     */\r\n    clearErrors() {\r\n        this.#items = this.#items.filter(item => item.level !== LOG_LEVELS.ERROR);\r\n    }\r\n\r\n    /**\r\n     * Clears all log entries with the specified context\r\n     * @param {string} context\r\n     * @returns {void}\r\n     */\r\n    clearContext(context) {\r\n        this.#items = this.#items.filter(item => item.context !== context);\r\n    }\r\n\r\n    /**\r\n     * Clears all log entries with the specified context and data\r\n     * @param {string} context\r\n     * @param {any} data\r\n     * @returns {void}\r\n     */\r\n    clearData(context, data) {\r\n        this.#items = this.#items.filter(item => item.context !== context && item.data !== data);\r\n    }\r\n}\r\n\r\nglobalThis.logger = new Logger();"],
  "mappings": "odAaA,IAAMA,EAAa,CACf,MAAO,QACP,KAAM,OACN,KAAM,OACN,MAAO,OACX,EAEMC,EAAa,CACf,QAAS,GACT,QAAS,GACT,KAAM,KACN,KAAM,IACV,EAzBAC,EAAAC,EAAAC,EAgCMC,EAAN,cAAqB,WAAY,CAAjC,kCAUIC,EAAA,KAAAH,GATAG,EAAA,KAAAJ,EAAS,CAAC,GAuBV,IAAI,MAAO,CACP,OAAOK,EAAA,KAAKL,EAChB,CAMA,IAAI,QAAS,CACT,OAAOK,EAAA,KAAKL,GAAO,OAAOM,GAAQA,EAAK,QAAUR,EAAW,KAAK,CACrE,CAQA,MAAMS,EAASC,EAASC,EAAM,CAC1BC,EAAA,KAAKT,EAAAC,GAAL,UAAUJ,EAAW,MAAOS,EAASC,EAASC,GAC9C,KAAK,cAAc,IAAI,YAAY,QAAS,CAAE,OAAQ,CAAE,QAAAF,EAAS,QAAAC,EAAS,KAAAC,CAAK,CAAE,CAAC,CAAC,CACvF,CAQA,KAAKF,EAASC,EAASC,EAAM,CACzBC,EAAA,KAAKT,EAAAC,GAAL,UAAUJ,EAAW,KAAMS,EAASC,EAASC,EACjD,CAQA,KAAKF,EAASC,EAASC,EAAM,CACzBC,EAAA,KAAKT,EAAAC,GAAL,UAAUJ,EAAW,KAAMS,EAASC,EAASC,EACjD,CAQA,MAAMF,EAASC,EAASC,EAAM,CAC1BC,EAAA,KAAKT,EAAAC,GAAL,UAAUJ,EAAW,MAAOS,EAASC,EAASC,EAClD,CAMA,OAAQ,CACJE,EAAA,KAAKX,EAAS,CAAC,EACnB,CAMA,aAAc,CACVW,EAAA,KAAKX,EAASK,EAAA,KAAKL,GAAO,OAAOM,GAAQA,EAAK,QAAUR,EAAW,KAAK,EAC5E,CAOA,aAAaU,EAAS,CAClBG,EAAA,KAAKX,EAASK,EAAA,KAAKL,GAAO,OAAOM,GAAQA,EAAK,UAAYE,CAAO,EACrE,CAQA,UAAUA,EAASC,EAAM,CACrBE,EAAA,KAAKX,EAASK,EAAA,KAAKL,GAAO,OAAOM,GAAQA,EAAK,UAAYE,GAAWF,EAAK,OAASG,CAAI,EAC3F,CACJ,EA/GMG,EAAAT,EAAA,UACFH,EAAA,YASAC,EAAA,YAAAC,EAAIU,EAAA,SAACC,EAAON,EAAU,GAAIC,EAAU,GAAIC,EAAO,KAAM,CACjD,IAAMK,EAAQ,gBAAgBf,CAAU,EACxCe,EAAM,QAAUP,EAChBO,EAAM,QAAUN,EAChBM,EAAM,KAAOL,EACbK,EAAM,KAAO,IAAI,KAAK,EAAE,YAAY,EACpCA,EAAM,MAAQD,EACdR,EAAA,KAAKL,GAAO,KAAKc,CAAK,CAC1B,EARI,QAuGR,WAAW,OAAS,IAAIX",
  "names": ["LOG_LEVELS", "LOG_STRUCT", "_items", "_log", "log_fn", "Logger", "__privateAdd", "__privateGet", "item", "message", "context", "data", "__privateMethod", "__privateSet", "__name", "level", "entry"]
}
