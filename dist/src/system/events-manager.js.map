{
  "version": 3,
  "sources": ["../../../src/modules/system.js", "../../../src/system/events-manager.js"],
  "sourcesContent": ["/**\r\n * @class SystemModule\r\n * @description The system module provides methods that are system related.\r\n * This includes features such as are we on mobile ...?\r\n */\r\nexport class SystemModule {\r\n\t/**\r\n\t * @property name\r\n\t * @type {string}\r\n\t * @static\r\n\t * @description Name of the module\r\n\t */\r\n\tstatic name = Object.freeze(\"view_loader\");\r\n\r\n    /**\r\n     * @method isMobile\r\n     * @description Check if the user is on a mobile device\r\n     * @returns {boolean}\r\n     *\r\n     * @example\r\n     * const isMobile = SystemModule.is_mobile();\r\n     */\r\n    static is_mobile() {\r\n        if (globalThis.MOBILE_ENV ?? false) {\r\n            return true;\r\n        }\r\n\r\n        return /Mobi/.test(navigator.userAgent);\r\n    }\r\n}", "/**\r\n * This class manages events.\r\n * You can add and remove events.\r\n * It also allows you to clear all events.\r\n * Pointer events will be managed based on mobility, so you don't have to worry about it.\r\n * When you dispose the class, all events will be removed.\r\n */\r\n\r\nimport { SystemModule } from \"../modules/system.js\";\r\n\r\nconst EVENTMAP = Object.freeze({\r\n    \"mousedown\" : \"touchstart\",\r\n    \"mouseup\"   : \"touchend\",\r\n    \"mousemove\" : \"touchmove\",\r\n    \"click\"     : \"touchend\",    \r\n})\r\n\r\nexport class EventsManager {\r\n    constructor() {\r\n        this.events = new Map();\r\n    }\r\n\r\n    /**\r\n     * Adds an event listener.\r\n     * @param {EventTarget} target - The target to which the event listener will be added.\r\n     * @param {string} type - The type of the event.\r\n     * @param {EventListenerOrEventListenerObject} listener - The event listener.\r\n     * @param {Object} [options] - Optional options for the event listener.\r\n     */\r\n    addEvent(target, type, listener, options) {\r\n        if (!this.events.has(target)) {\r\n            this.events.set(target, []);\r\n        }\r\n        this.events.get(target).push({ type, listener, options });\r\n        target.addEventListener(type, listener, options);\r\n    }\r\n\r\n    /**\r\n     * Adds a pointer event listener, including double-click.\r\n     * @param {EventTarget} target - The target to which the event listener will be added.\r\n     * @param {string} type - The type of the event.\r\n     * @param {EventListenerOrEventListenerObject} listener - The event listener.\r\n     * @param {Object} [options] - Optional options for the event listener.\r\n     */\r\n    addPointerEvent(target, type, listener, options) {\r\n        let eventType;\r\n        \r\n        if (SystemModule.is_mobile()) {\r\n            eventType = EVENTMAP[type];\r\n        } else {\r\n            eventType = type;\r\n        }\r\n\r\n        this.addEvent(target, eventType, listener, options);\r\n    }\r\n\r\n    /**\r\n     * Adds a keyboard event listener.\r\n     * @param {EventTarget} target - The target to which the event listener will be added.\r\n     * @param {string} type - The type of the event.\r\n     * @param {EventListenerOrEventListenerObject} listener - The event listener.\r\n     * @param {Object} [options] - Optional options for the event listener.\r\n     */\r\n    addKeyboardEvent(target, type, listener, options) {\r\n        this.addEvent(target, type, listener, options);\r\n    }\r\n\r\n    /**\r\n     * Adds a double-click event listener.\r\n     * @param {EventTarget} target - The target to which the event listener will be added.\r\n     * @param {EventListenerOrEventListenerObject} listener - The event listener.\r\n     * @param {Object} [options] - Optional options for the event listener.\r\n     */\r\n    addDoubleClickEvent(target, listener, options) {\r\n        this.addEvent(target, 'dblclick', listener, options);\r\n    }\r\n\r\n    /**\r\n     * Removes an event listener.\r\n     * @param {EventTarget} target - The target from which the event listener will be removed.\r\n     * @param {string} type - The type of the event.\r\n     * @param {EventListenerOrEventListenerObject} listener - The event listener.\r\n     * @param {Object} [options] - Optional options for the event listener.\r\n     */\r\n    removeEvent(target, type, listener, options) {\r\n        if (this.events.has(target)) {\r\n            const targetEvents = this.events.get(target);\r\n            const index = targetEvents.findIndex(event => event.type === type && event.listener === listener && event.options === options);\r\n            if (index !== -1) {\r\n                targetEvents.splice(index, 1);\r\n                target.removeEventListener(type, listener, options);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears all events.\r\n     */\r\n    clearEvents() {\r\n        for (const [target, targetEvents] of this.events.entries()) {\r\n            for (const { type, listener, options } of targetEvents) {\r\n                target.removeEventListener(type, listener, options);\r\n            }\r\n        }\r\n        this.events.clear();\r\n    }\r\n\r\n    /**\r\n     * Disposes the events manager and removes all events.\r\n     */\r\n    dispose() {\r\n        this.clearEvents();\r\n    }\r\n}"],
  "mappings": "2NAKO,IAAMA,EAAN,KAAmB,CAiBtB,OAAO,WAAY,CAtBvB,IAAAC,EAuBQ,OAAIA,EAAA,WAAW,aAAX,MAAAA,EACO,GAGJ,OAAO,KAAK,UAAU,SAAS,CAC1C,CACJ,EAjBCC,EAPYF,EAOL,OAAO,OAAO,OAAO,aAAa,GCF1C,IAAMG,EAAW,OAAO,OAAO,CAC3B,UAAc,aACd,QAAc,WACd,UAAc,YACd,MAAc,UAClB,CAAC,EAEYC,EAAN,KAAoB,CACvB,aAAc,CACV,KAAK,OAAS,IAAI,GACtB,CASA,SAASC,EAAQC,EAAMC,EAAUC,EAAS,CACjC,KAAK,OAAO,IAAIH,CAAM,GACvB,KAAK,OAAO,IAAIA,EAAQ,CAAC,CAAC,EAE9B,KAAK,OAAO,IAAIA,CAAM,EAAE,KAAK,CAAE,KAAAC,EAAM,SAAAC,EAAU,QAAAC,CAAQ,CAAC,EACxDH,EAAO,iBAAiBC,EAAMC,EAAUC,CAAO,CACnD,CASA,gBAAgBH,EAAQC,EAAMC,EAAUC,EAAS,CAC7C,IAAIC,EAEAC,EAAa,UAAU,EACvBD,EAAYN,EAASG,CAAI,EAEzBG,EAAYH,EAGhB,KAAK,SAASD,EAAQI,EAAWF,EAAUC,CAAO,CACtD,CASA,iBAAiBH,EAAQC,EAAMC,EAAUC,EAAS,CAC9C,KAAK,SAASH,EAAQC,EAAMC,EAAUC,CAAO,CACjD,CAQA,oBAAoBH,EAAQE,EAAUC,EAAS,CAC3C,KAAK,SAASH,EAAQ,WAAYE,EAAUC,CAAO,CACvD,CASA,YAAYH,EAAQC,EAAMC,EAAUC,EAAS,CACzC,GAAI,KAAK,OAAO,IAAIH,CAAM,EAAG,CACzB,IAAMM,EAAe,KAAK,OAAO,IAAIN,CAAM,EACrCO,EAAQD,EAAa,UAAUE,GAASA,EAAM,OAASP,GAAQO,EAAM,WAAaN,GAAYM,EAAM,UAAYL,CAAO,EACzHI,IAAU,KACVD,EAAa,OAAOC,EAAO,CAAC,EAC5BP,EAAO,oBAAoBC,EAAMC,EAAUC,CAAO,GAG9D,CAKA,aAAc,CACV,OAAW,CAACH,EAAQM,CAAY,IAAK,KAAK,OAAO,QAAQ,EACrD,OAAW,CAAE,KAAAL,EAAM,SAAAC,EAAU,QAAAC,CAAQ,IAAKG,EACtCN,EAAO,oBAAoBC,EAAMC,EAAUC,CAAO,EAG1D,KAAK,OAAO,MAAM,CACtB,CAKA,SAAU,CACN,KAAK,YAAY,CACrB,CACJ,EAhGaM,EAAAV,EAAA",
  "names": ["SystemModule", "_a", "__publicField", "EVENTMAP", "EventsManager", "target", "type", "listener", "options", "eventType", "SystemModule", "targetEvents", "index", "event", "__name"]
}
